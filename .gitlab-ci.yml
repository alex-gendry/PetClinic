stages:
  - create_version
  - static
  - docker_start
  - dynamic
  - docker_stop

variables:
  DOCKER_REGISTRY: docker.ekseed.org
  IMAGE_NAME: ${CI_PROJECT_NAME}
  FTFY_APPLICATION: "PetClinic"
  SCDAST_SETTINGS: "be91c3ae-8099-485b-a161-36d2e8c4e4a3"
  FTFY_PROJECT: "PetClinic"
  FTFY_BUILD: "$FTFY_PROJECT-$CI_COMMIT_BRANCH"
  FTFY_FPR_FILE: "gitlab-$FTFY_BUILD.fpr"
  IQ_APP: "petclinic"
  IQ_STAGE: "build"
  FCLI_SSC_URL: $FTFY_SSC_URL
  FCLI_DEFAULT_SSC_TOKEN: $FTFY_ENC_TOKEN
  FCLI_SC_SAST_CLIENT_AUTH_TOKEN: GCBJqBPr7qd5dgkf
  FCLI_SC_SAST_SCAN_CI_TOKEN: $FTFY_ESAST_TOKEN

create_version:
  stage: create_version
  image: fortifydocker/fortify-ci-tools
  script:
    - fcli ssc session login
    - fcli ssc appversion create ${FTFY_PROJECT}:${CI_COMMIT_REF_NAME} --auto-required-attrs --skip-if-exists
  tags:
    - docker-exec
    - linux

sast-scan:
  stage: static
  image: fortifydocker/fortify-ci-tools
  variables:
    SCANCENTRAL_BUILD_OPTS: "-bt mvn"
    SSC_APP: $FTFY_PROJECT
    SSC_PV: $CI_COMMIT_REF_NAME

  # Run Fortify ScanCentral Client. SSC_URL and SSC_TOKEN are expected as GitLab CICD Variables in the template (masking recommended).
  script:
    - fcli ssc session login
    - fcli sc-sast session login

    # Package sources & run SAST scan
    - scancentral package -bt mvn -o package.zip 
    - fcli sc-sast scan start package package.zip --sensor-version 22.1 --appversion {?myVersion:id} --store '?'
    
    # Wait for SAST scan to complete
    - fcli sc-sast scan wait-for-artifact '?' -i 30s
        
    - FortifyVulnerabilityExporter SSCToGitLabSAST --ssc.baseUrl=$FCLI_SSC_URL --ssc.authToken="$FCLI_DEFAULT_SSC_TOKEN" --ssc.version.id=$(fcli config var contents get myVersion -o expr={id})

    # Clean up tokens, session variables, ...
    - fcli sc-sast session logout
    - fcli ssc session logout


  needs:
    - create_version
#  script:
#    - sourceanalyzer -b $FTFY_BUILD -clean
#    - sourceanalyzer -b $FTFY_BUILD -verbose -debug -cp "petclinic-3.0/lib/*.jar" petclinic-3.0/src
#    - >
#      scancentral -sscurl $FTFY_SSC_URL -ssctoken $FTFY_CI_TOKEN
#      start -b $FTFY_BUILD-upload -uptoken $FTFY_ESAST_TOKEN -application $FTFY_PROJECT -version $CI_COMMIT_REF_NAME -scan  -Dcom.fortify.sca.rules.enable_wi_correlation
#    - sourceanalyzer -b $FTFY_BUILD -verbose -debug -logfile scan.log -scan -f $FTFY_FPR_FILE -analyzers dataflow -Dcom.fortify.sca.rules.enable_wi_correlation
#    - fortifyclient -debug -url $FTFY_SSC_URL -authtoken $FTFY_CI_TOKEN uploadFPR -application ${FTFY_PROJECT} -applicationVersion ${CI_COMMIT_REF_NAME} -file $FTFY_FPR_FILE
  tags:
    - docker-exec
    - linux

sca-scan:
  stage: static
  image: fortifydocker/fortify-ci-tools
  script:
    - mvn dependency:copy-dependencies
    - nexus-iq-cli --server-url ${IQ_URL} --authentication ${IQ_TOKEN} --application-id ${IQ_APP} --stage ${IQ_STAGE} target/dependency pom.xml
#    - iq-integration -iqurl ${IQ_URL}  -iquser $IQ_USERNAME -iqpassword $IQ_PASSWORD -iqproject ${IQ_APP} -iqstage build -sscurl $FTFY_SSC_URL -ssctoken ${FTFY_ENC_TOKEN} -sscapp ${FTFY_PROJECT} -sscversion ${CI_COMMIT_REF_NAME}
  tags:
    - docker-exec
    - linux

build_n_start:
  stage: docker_start
  needs:
    - create_version
  script:
    ## Login to docker registry
    - docker login --username ${REGISTRY_USERNAME} --password ${REGISTRY_PASSWORD} ${DOCKER_REGISTRY}
    - docker build . -t docker.ekseed.org/petclinic:$CI_COMMIT_SHORT_SHA
    - docker run -d --name petclinic-$CI_COMMIT_SHORT_SHA --rm -p 8880:8080 docker.ekseed.org/petclinic:$CI_COMMIT_SHORT_SHA
  tags:
    - fortify-ubuntu
    - shell
      
dast-scan:
  stage: dynamic
  needs:
    - build_n_start
  image: fortifydocker/fortify-ci-tools
  script:
    - fcli sc-dast session login --ssc-url ${FTFY_SSC_URL} --ssc-ci-token ${FTFY_ENC_TOKEN}
    - fcli sc-dast scan start --settings=${SCDAST_SETTINGS}  --start-url=http://fortify-ubuntu.ekseed.org:8880/petclinic --store dastscan "petclinic-${CI_COMMIT_BRANCH}-$CI_COMMIT_SHORT_SHA"
    - fcli sc-dast scan wait-for -u=Complete '{?dastscan:id}'
#  allow_failure: true
  tags :
    - docker-exec

stop_app:
  stage: docker_stop
  needs:
    - dast-scan
  script:
    ## Login to docker registry
    - docker stop petclinic-$CI_COMMIT_SHORT_SHA
  tags:
    - fortify-ubuntu
    - shell


